AZ.goals$sum.clean = AZ.goals$EMTCB + AZ.goals$GETCB + AZ.goals$HYTCB + AZ.goals$SOTCB + AZ.goals$WYTCB
AZ.goals[4,1] = max(c(AZ.imp[51,1] - AZ.goals$sum.clean[4]/3, 0))
AZ.goals[4,5] = max(c(AZ.imp[51,5] - AZ.goals$sum.clean[4]/3, 0))
AZ.goals[4,6] = max(c(AZ.imp[51,6] - AZ.goals$sum.clean[4]/3, 0))
AZ.goals[5,1] = max(c(AZ.imp[52,1] - AZ.goals$sum.clean[5]/3, 0))
AZ.goals[5,5] = max(c(AZ.imp[52,5] - AZ.goals$sum.clean[5]/3, 0))
AZ.goals[5,6] = max(c(AZ.imp[52,6] - AZ.goals$sum.clean[5]/3, 0))
CA.goals[4,c(2,3,7,8)] = CA.goals[1,c(2,3,7,8)] + CA.2025.goals[1,]
CA.goals[5,c(2,3,7,8)] = CA.goals[1,c(2,3,7,8)] + CA.2050.goals[1,]
CA.goals[4,4] = max(CA.imp$HYTCB[1:50])
CA.goals[5,4] = max(CA.imp$HYTCB[1:50])
CA.goals[4,9] = CA.goals[2,9]
CA.goals[5,9] = CA.goals[3,9]
CA.goals$sum.clean = CA.goals$EMTCB + CA.goals$GETCB + CA.goals$HYTCB + CA.goals$SOTCB + CA.goals$WYTCB
CA.goals[4,1] = max(c(CA.imp[51,1] - CA.goals$sum.clean[4]/3, 0))
CA.goals[4,5] = max(c(CA.imp[51,5] - CA.goals$sum.clean[4]/3, 0))
CA.goals[4,6] = max(c(CA.imp[51,6] - CA.goals$sum.clean[4]/3, 0))
CA.goals[5,1] = max(c(CA.imp[52,1] - CA.goals$sum.clean[5]/3, 0))
CA.goals[5,5] = max(c(CA.imp[52,5] - CA.goals$sum.clean[5]/3, 0))
CA.goals[5,6] = max(c(CA.imp[52,6] - CA.goals$sum.clean[5]/3, 0))
NM.goals[4,c(2,3,7,8)] = NM.goals[1,c(2,3,7,8)] + NM.2025.goals[1,]
NM.goals[5,c(2,3,7,8)] = NM.goals[1,c(2,3,7,8)] + NM.2050.goals[1,]
NM.goals[4,4] = max(NM.imp$HYTCB[1:50])
NM.goals[5,4] = max(NM.imp$HYTCB[1:50])
NM.goals[4,9] = NM.goals[2,9]
NM.goals[5,9] = NM.goals[3,9]
NM.goals$sum.clean = NM.goals$EMTCB + NM.goals$GETCB + NM.goals$HYTCB + NM.goals$SOTCB + NM.goals$WYTCB
NM.goals[4,1] = max(c(NM.imp[51,1] - NM.goals$sum.clean[4]/3, 0))
NM.goals[4,5] = max(c(NM.imp[51,5] - NM.goals$sum.clean[4]/3, 0))
NM.goals[4,6] = max(c(NM.imp[51,6] - NM.goals$sum.clean[4]/3, 0))
NM.goals[5,1] = max(c(NM.imp[52,1] - NM.goals$sum.clean[5]/3, 0))
NM.goals[5,5] = max(c(NM.imp[52,5] - NM.goals$sum.clean[5]/3, 0))
NM.goals[5,6] = max(c(NM.imp[52,6] - NM.goals$sum.clean[5]/3, 0))
TX.goals[4,c(2,3,7,8)] = TX.goals[1,c(2,3,7,8)] + TX.2025.goals[1,]
TX.goals[5,c(2,3,7,8)] = TX.goals[1,c(2,3,7,8)] + TX.2050.goals[1,]
TX.goals[4,4] = max(TX.imp$HYTCB[1:50])
TX.goals[5,4] = max(TX.imp$HYTCB[1:50])
TX.goals[4,9] = TX.goals[2,9]
TX.goals[5,9] = TX.goals[3,9]
TX.goals$sum.clean = TX.goals$EMTCB + TX.goals$GETCB + TX.goals$HYTCB + TX.goals$SOTCB + TX.goals$WYTCB
TX.goals[4,1] = max(c(TX.imp[51,1] - TX.goals$sum.clean[4]/3, 0))
TX.goals[4,5] = max(c(TX.imp[51,5] - TX.goals$sum.clean[4]/3, 0))
TX.goals[4,6] = max(c(TX.imp[51,6] - TX.goals$sum.clean[4]/3, 0))
TX.goals[5,1] = max(c(TX.imp[52,1] - TX.goals$sum.clean[5]/3, 0))
TX.goals[5,5] = max(c(TX.imp[52,5] - TX.goals$sum.clean[5]/3, 0))
TX.goals[5,6] = max(c(TX.imp[52,6] - TX.goals$sum.clean[5]/3, 0))
par(mfrow = c(1,3))
barplot(as.numeric(AZ.goals[1,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2009", ylim = c(0, 600000), ylab = "Total Energy Consumption in BTU")
barplot(as.numeric(AZ.goals[4,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2025", ylim = c(0, 600000))
barplot(as.numeric(AZ.goals[5,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2050", ylim = c(0, 600000))
barplot(as.numeric(CA.goals[1,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2009", ylim = c(0, 4000000), ylab = "Total Energy Consumption in BTU")
barplot(as.numeric(CA.goals[4,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2025", ylim = c(0, 4000000))
barplot(as.numeric(CA.goals[5,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2050", ylim = c(0, 4000000))
barplot(as.numeric(NM.goals[1,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2009", ylim = c(0, 360000), ylab = "Total Energy Consumption in BTU")
barplot(as.numeric(NM.goals[4,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2025", ylim = c(0, 360000))
barplot(as.numeric(NM.goals[5,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2050", ylim = c(0, 360000))
barplot(as.numeric(TX.goals[1,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2009", ylim = c(0, 5300000), ylab = "Total Energy Consumption in BTU")
barplot(as.numeric(TX.goals[4,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2025", ylim = c(0, 5300000))
barplot(as.numeric(TX.goals[5,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2050", ylim = c(0, 5300000))
goal.sim = function(goals.vect, opt.percent.vect)
{
opt.vect = opt.percent.vect*goals.vect[,"sum"]
sim = cosine.similarity(opt.vect, goals.vect[,1:8])
return(sim)
}
goals.table = rbind(AZ.goals[4:5,1:9], CA.goals[4:5,1:9])
goals.table = rbind(goals.table, NM.goals[4:5,1:9])
goals.table = rbind(goals.table, TX.goals[4:5,1:9])
rownames(goals.table) = c("Arizona 2025", "Arizona 2050",
"California 2025", "California 2050",
"New Mexico 2025", "New Mexico 2050",
"Texas 2025", "Texas 2050")
goals.table$sim = 0
for(i in 1:nrow(goals.table))
{
goals.table$sim[i] = goal.sim(goals.table[i,], opt.percent["Default",])
}
write.table(goals.table, file = "/Users/katiebalcewicz/desktop/COMAP 2018/goals_table.csv", row.names = TRUE, col.names = TRUE, sep = ",")
rownames(AZ.goals) = c("2009", "2025 Predicted", "2050 Predicted", "2025 Goal", "2050 Goal")
rownames(CA.goals) = c("2009", "2025 Predicted", "2050 Predicted", "2025 Goal", "2050 Goal")
rownames(NM.goals) = c("2009", "2025 Predicted", "2050 Predicted", "2025 Goal", "2050 Goal")
rownames(TX.goals) = c("2009", "2025 Predicted", "2050 Predicted", "2025 Goal", "2050 Goal")
AZ.goals$similarity = 0
for(i in 1:nrow(AZ.goals))
{
AZ.goals$similarity[i] = goal.sim(AZ.goals[i,], opt.percent["Default",])
}
CA.goals$similarity = 0
for(i in 1:nrow(CA.goals))
{
CA.goals$similarity[i] = goal.sim(CA.goals[i,], opt.percent["Default",])
}
NM.goals$similarity = 0
for(i in 1:nrow(NM.goals))
{
NM.goals$similarity[i] = goal.sim(NM.goals[i,], opt.percent["Default",])
}
TX.goals$similarity = 0
for(i in 1:nrow(TX.goals))
{
TX.goals$similarity[i] = goal.sim(TX.goals[i,], opt.percent["Default",])
}
AZ.goals = AZ.goals[,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB", "similarity")]
CA.goals = CA.goals[,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB", "similarity")]
NM.goals = NM.goals[,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB", "similarity")]
TX.goals = TX.goals[,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB", "similarity")]
AZ.goals.out = round(AZ.goals[,1:8]/rowSums(AZ.goals[,1:8]), 4)
AZ.goals.out$similarity = AZ.goals$similarity
colnames(AZ.goals.out) = c("Coal", "Natural Gas", "Petroleum Products", "Fuel Ethanol ", "Geothermal", "Hydroelectric", "Solar", "Wind", "Profile Score")
write.table(AZ.goals.out, file = "/Users/katiebalcewicz/desktop/COMAP 2018/arizona.csv", row.names = TRUE, col.names = TRUE, sep = ",")
CA.goals.out = round(CA.goals[,1:8]/rowSums(CA.goals[,1:8]), 4)
CA.goals.out$similarity = CA.goals$similarity
colnames(CA.goals.out) = c("Coal", "Natural Gas", "Petroleum Products", "Fuel Ethanol ", "Geothermal", "Hydroelectric", "Solar", "Wind", "Profile Score")
write.table(CA.goals.out, file = "/Users/katiebalcewicz/desktop/COMAP 2018/california.csv", row.names = TRUE, col.names = TRUE, sep = ",")
NM.goals.out = round(NM.goals[,1:8]/rowSums(NM.goals[,1:8]), 4)
NM.goals.out$similarity = NM.goals$similarity
colnames(NM.goals.out) = c("Coal", "Natural Gas", "Petroleum Products", "Fuel Ethanol ", "Geothermal", "Hydroelectric", "Solar", "Wind", "Profile Score")
write.table(NM.goals.out, file = "/Users/katiebalcewicz/desktop/COMAP 2018/new mexico.csv", row.names = TRUE, col.names = TRUE, sep = ",")
TX.goals.out = round(TX.goals[,1:8]/rowSums(TX.goals[,1:8]), 4)
TX.goals.out$similarity = TX.goals$similarity
colnames(TX.goals.out) = c("Coal", "Natural Gas", "Petroleum Products", "Fuel Ethanol ", "Geothermal", "Hydroelectric", "Solar", "Wind", "Profile Score")
write.table(TX.goals.out, file = "/Users/katiebalcewicz/desktop/COMAP 2018/texas.csv", row.names = TRUE, col.names = TRUE, sep = ",")
AZ.2050.goals = data.frame((25*1.1)*AZ.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")] + 16*AZ.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")])
############GOALS
maxdiff = function(df.imp)
{
maxdiffs = numeric(8)
names(maxdiffs) = colnames(df.imp)[1:8]
for(i in 1:8)
{
diffs = numeric(49)
for(j in 1:49)
{
diffs[j] = df.imp[j+1,i] - df.imp[j,i]
}
maxdiffs[i] = max(diffs)
}
return(maxdiffs)
}
AZ.maxdiffs = maxdiff(AZ.imp)
CA.maxdiffs = maxdiff(CA.imp)
NM.maxdiffs = maxdiff(NM.imp)
TX.maxdiffs = maxdiff(TX.imp)
AZ.2025.goals = data.frame(16*AZ.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")])
CA.2025.goals = data.frame(16*CA.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")])
NM.2025.goals = data.frame(16*NM.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")])
TX.2025.goals = data.frame(16*TX.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")])
AZ.2050.goals = data.frame((25*1.1)*AZ.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")] + 16*AZ.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")])
CA.2050.goals = data.frame((25*1.1)*CA.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")] + 16*CA.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")])
NM.2050.goals = data.frame((25*1.1)*NM.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")] + 16*NM.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")])
TX.2050.goals = data.frame((25*1.1)*TX.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")] + 16*TX.maxdiffs[c("EMTCB", "GETCB", "SOTCB", "WYTCB")])
AZ.goals = AZ.imp[50:52,]
CA.goals = CA.imp[50:52,]
NM.goals = NM.imp[50:52,]
TX.goals = TX.imp[50:52,]
empty = data.frame(matrix(NA, nrow = 2, ncol = 9))
colnames(empty) = colnames(AZ.goals)
AZ.goals = rbind(AZ.goals, empty)
CA.goals = rbind(CA.goals, empty)
NM.goals = rbind(NM.goals, empty)
TX.goals = rbind(TX.goals, empty)
AZ.goals[4,c(2,3,7,8)] = AZ.goals[1,c(2,3,7,8)] + AZ.2025.goals[1,]
AZ.goals[5,c(2,3,7,8)] = AZ.goals[1,c(2,3,7,8)] + AZ.2050.goals[1,]
AZ.goals[4,4] = max(AZ.imp$HYTCB[1:50])
AZ.goals[5,4] = max(AZ.imp$HYTCB[1:50])
AZ.goals[4,9] = AZ.goals[2,9]
AZ.goals[5,9] = AZ.goals[3,9]
AZ.goals$sum.clean = AZ.goals$EMTCB + AZ.goals$GETCB + AZ.goals$HYTCB + AZ.goals$SOTCB + AZ.goals$WYTCB
AZ.goals[4,1] = max(c(AZ.imp[51,1] - AZ.goals$sum.clean[4]/3, 0))
AZ.goals[4,5] = max(c(AZ.imp[51,5] - AZ.goals$sum.clean[4]/3, 0))
AZ.goals[4,6] = max(c(AZ.imp[51,6] - AZ.goals$sum.clean[4]/3, 0))
AZ.goals[5,1] = max(c(AZ.imp[52,1] - AZ.goals$sum.clean[5]/3, 0))
AZ.goals[5,5] = max(c(AZ.imp[52,5] - AZ.goals$sum.clean[5]/3, 0))
AZ.goals[5,6] = max(c(AZ.imp[52,6] - AZ.goals$sum.clean[5]/3, 0))
CA.goals[4,c(2,3,7,8)] = CA.goals[1,c(2,3,7,8)] + CA.2025.goals[1,]
CA.goals[5,c(2,3,7,8)] = CA.goals[1,c(2,3,7,8)] + CA.2050.goals[1,]
CA.goals[4,4] = max(CA.imp$HYTCB[1:50])
CA.goals[5,4] = max(CA.imp$HYTCB[1:50])
CA.goals[4,9] = CA.goals[2,9]
CA.goals[5,9] = CA.goals[3,9]
CA.goals$sum.clean = CA.goals$EMTCB + CA.goals$GETCB + CA.goals$HYTCB + CA.goals$SOTCB + CA.goals$WYTCB
CA.goals[4,1] = max(c(CA.imp[51,1] - CA.goals$sum.clean[4]/3, 0))
CA.goals[4,5] = max(c(CA.imp[51,5] - CA.goals$sum.clean[4]/3, 0))
CA.goals[4,6] = max(c(CA.imp[51,6] - CA.goals$sum.clean[4]/3, 0))
CA.goals[5,1] = max(c(CA.imp[52,1] - CA.goals$sum.clean[5]/3, 0))
CA.goals[5,5] = max(c(CA.imp[52,5] - CA.goals$sum.clean[5]/3, 0))
CA.goals[5,6] = max(c(CA.imp[52,6] - CA.goals$sum.clean[5]/3, 0))
NM.goals[4,c(2,3,7,8)] = NM.goals[1,c(2,3,7,8)] + NM.2025.goals[1,]
NM.goals[5,c(2,3,7,8)] = NM.goals[1,c(2,3,7,8)] + NM.2050.goals[1,]
NM.goals[4,4] = max(NM.imp$HYTCB[1:50])
NM.goals[5,4] = max(NM.imp$HYTCB[1:50])
NM.goals[4,9] = NM.goals[2,9]
NM.goals[5,9] = NM.goals[3,9]
NM.goals$sum.clean = NM.goals$EMTCB + NM.goals$GETCB + NM.goals$HYTCB + NM.goals$SOTCB + NM.goals$WYTCB
NM.goals[4,1] = max(c(NM.imp[51,1] - NM.goals$sum.clean[4]/3, 0))
NM.goals[4,5] = max(c(NM.imp[51,5] - NM.goals$sum.clean[4]/3, 0))
NM.goals[4,6] = max(c(NM.imp[51,6] - NM.goals$sum.clean[4]/3, 0))
NM.goals[5,1] = max(c(NM.imp[52,1] - NM.goals$sum.clean[5]/3, 0))
NM.goals[5,5] = max(c(NM.imp[52,5] - NM.goals$sum.clean[5]/3, 0))
NM.goals[5,6] = max(c(NM.imp[52,6] - NM.goals$sum.clean[5]/3, 0))
TX.goals[4,c(2,3,7,8)] = TX.goals[1,c(2,3,7,8)] + TX.2025.goals[1,]
TX.goals[5,c(2,3,7,8)] = TX.goals[1,c(2,3,7,8)] + TX.2050.goals[1,]
TX.goals[4,4] = max(TX.imp$HYTCB[1:50])
TX.goals[5,4] = max(TX.imp$HYTCB[1:50])
TX.goals[4,9] = TX.goals[2,9]
TX.goals[5,9] = TX.goals[3,9]
TX.goals$sum.clean = TX.goals$EMTCB + TX.goals$GETCB + TX.goals$HYTCB + TX.goals$SOTCB + TX.goals$WYTCB
TX.goals[4,1] = max(c(TX.imp[51,1] - TX.goals$sum.clean[4]/3, 0))
TX.goals[4,5] = max(c(TX.imp[51,5] - TX.goals$sum.clean[4]/3, 0))
TX.goals[4,6] = max(c(TX.imp[51,6] - TX.goals$sum.clean[4]/3, 0))
TX.goals[5,1] = max(c(TX.imp[52,1] - TX.goals$sum.clean[5]/3, 0))
TX.goals[5,5] = max(c(TX.imp[52,5] - TX.goals$sum.clean[5]/3, 0))
TX.goals[5,6] = max(c(TX.imp[52,6] - TX.goals$sum.clean[5]/3, 0))
par(mfrow = c(1,3))
barplot(as.numeric(AZ.goals[1,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2009", ylim = c(0, 600000), ylab = "Total Energy Consumption in BTU")
barplot(as.numeric(AZ.goals[4,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2025", ylim = c(0, 600000))
barplot(as.numeric(AZ.goals[5,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2050", ylim = c(0, 600000))
barplot(as.numeric(CA.goals[1,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2009", ylim = c(0, 4000000), ylab = "Total Energy Consumption in BTU")
barplot(as.numeric(CA.goals[4,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2025", ylim = c(0, 4000000))
barplot(as.numeric(CA.goals[5,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2050", ylim = c(0, 4000000))
barplot(as.numeric(NM.goals[1,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2009", ylim = c(0, 360000), ylab = "Total Energy Consumption in BTU")
barplot(as.numeric(NM.goals[4,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2025", ylim = c(0, 360000))
barplot(as.numeric(NM.goals[5,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2050", ylim = c(0, 360000))
barplot(as.numeric(TX.goals[1,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2009", ylim = c(0, 5300000), ylab = "Total Energy Consumption in BTU")
barplot(as.numeric(TX.goals[4,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2025", ylim = c(0, 5300000))
barplot(as.numeric(TX.goals[5,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB")]),
col = c("tomato", "orangered", "red3",
"olivedrab4", "olivedrab3", "olivedrab2", "springgreen2", "springgreen3"),
main = "2050", ylim = c(0, 5300000))
goal.sim = function(goals.vect, opt.percent.vect)
{
opt.vect = opt.percent.vect*goals.vect[,"sum"]
sim = cosine.similarity(opt.vect, goals.vect[,1:8])
return(sim)
}
goals.table = rbind(AZ.goals[4:5,1:9], CA.goals[4:5,1:9])
goals.table = rbind(goals.table, NM.goals[4:5,1:9])
goals.table = rbind(goals.table, TX.goals[4:5,1:9])
rownames(goals.table) = c("Arizona 2025", "Arizona 2050",
"California 2025", "California 2050",
"New Mexico 2025", "New Mexico 2050",
"Texas 2025", "Texas 2050")
goals.table$sim = 0
for(i in 1:nrow(goals.table))
{
goals.table$sim[i] = goal.sim(goals.table[i,], opt.percent["Default",])
}
write.table(goals.table, file = "/Users/katiebalcewicz/desktop/COMAP 2018/goals_table.csv", row.names = TRUE, col.names = TRUE, sep = ",")
rownames(AZ.goals) = c("2009", "2025 Predicted", "2050 Predicted", "2025 Goal", "2050 Goal")
rownames(CA.goals) = c("2009", "2025 Predicted", "2050 Predicted", "2025 Goal", "2050 Goal")
rownames(NM.goals) = c("2009", "2025 Predicted", "2050 Predicted", "2025 Goal", "2050 Goal")
rownames(TX.goals) = c("2009", "2025 Predicted", "2050 Predicted", "2025 Goal", "2050 Goal")
AZ.goals$similarity = 0
for(i in 1:nrow(AZ.goals))
{
AZ.goals$similarity[i] = goal.sim(AZ.goals[i,], opt.percent["Default",])
}
CA.goals$similarity = 0
for(i in 1:nrow(CA.goals))
{
CA.goals$similarity[i] = goal.sim(CA.goals[i,], opt.percent["Default",])
}
NM.goals$similarity = 0
for(i in 1:nrow(NM.goals))
{
NM.goals$similarity[i] = goal.sim(NM.goals[i,], opt.percent["Default",])
}
TX.goals$similarity = 0
for(i in 1:nrow(TX.goals))
{
TX.goals$similarity[i] = goal.sim(TX.goals[i,], opt.percent["Default",])
}
AZ.goals = AZ.goals[,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB", "similarity")]
CA.goals = CA.goals[,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB", "similarity")]
NM.goals = NM.goals[,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB", "similarity")]
TX.goals = TX.goals[,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB", "similarity")]
AZ.goals.out = round(AZ.goals[,1:8]/rowSums(AZ.goals[,1:8]), 4)
AZ.goals.out$similarity = AZ.goals$similarity
colnames(AZ.goals.out) = c("Coal", "Natural Gas", "Petroleum Products", "Fuel Ethanol ", "Geothermal", "Hydroelectric", "Solar", "Wind", "Profile Score")
write.table(AZ.goals.out, file = "/Users/katiebalcewicz/desktop/COMAP 2018/arizona.csv", row.names = TRUE, col.names = TRUE, sep = ",")
CA.goals.out = round(CA.goals[,1:8]/rowSums(CA.goals[,1:8]), 4)
CA.goals.out$similarity = CA.goals$similarity
colnames(CA.goals.out) = c("Coal", "Natural Gas", "Petroleum Products", "Fuel Ethanol ", "Geothermal", "Hydroelectric", "Solar", "Wind", "Profile Score")
write.table(CA.goals.out, file = "/Users/katiebalcewicz/desktop/COMAP 2018/california.csv", row.names = TRUE, col.names = TRUE, sep = ",")
NM.goals.out = round(NM.goals[,1:8]/rowSums(NM.goals[,1:8]), 4)
NM.goals.out$similarity = NM.goals$similarity
colnames(NM.goals.out) = c("Coal", "Natural Gas", "Petroleum Products", "Fuel Ethanol ", "Geothermal", "Hydroelectric", "Solar", "Wind", "Profile Score")
write.table(NM.goals.out, file = "/Users/katiebalcewicz/desktop/COMAP 2018/new mexico.csv", row.names = TRUE, col.names = TRUE, sep = ",")
TX.goals.out = round(TX.goals[,1:8]/rowSums(TX.goals[,1:8]), 4)
TX.goals.out$similarity = TX.goals$similarity
colnames(TX.goals.out) = c("Coal", "Natural Gas", "Petroleum Products", "Fuel Ethanol ", "Geothermal", "Hydroelectric", "Solar", "Wind", "Profile Score")
write.table(TX.goals.out, file = "/Users/katiebalcewicz/desktop/COMAP 2018/texas.csv", row.names = TRUE, col.names = TRUE, sep = ",")
AZ.goals
goals.table
write.table(goals.table[,c("CLTCB", "NNTCB", "PMTCB", "EMTCB", "GETCB", "HYTCB", "SOTCB", "WYTCB","sim")], file = "/Users/katiebalcewicz/desktop/COMAP 2018/goals_table.csv", row.names = TRUE, col.names = TRUE, sep = ",")
predict(AZ.out, type="coef", s = AZ.IB.ridge$lambda.min)
predict(CA.out, type="coef", s = CA.IB.ridge$lambda.min)
predict(NM.out, type="coef", s = NM.IB.ridge$lambda.min)
predict(TX.out, type="coef", s = TX.IB.ridge$lambda.min)
load("~/Desktop/MATH 441/Project/workspace.RData")
View(outcomes)
indices = sample(seq_len(nrow(outcomes)), size = floor(0.5* nrow(outcomes)))
clustdf = outcomes[indices,-1]
d.outcomes = dist(clustdf, method="euclidean")
fit.complete = hclust(d=d.outcomes, method="complete")
plot(fit.complete, hang=-1)
plot(fit.complete, hang=-1)
d.outcomes = dist(t(outcomes), method="euclidean")
fit.complete = hclust(d=d.outcomes, method="complete")
plot(fit.complete, hang=-1)
d.outcomes = dist(t(outcomes[,-1]), method="euclidean")
fit.complete = hclust(d=d.outcomes, method="complete")
plot(fit.complete, hang=-1)
d.outcomes = dist(t(outcomes[,-1]), method="euclidean")
fit.complete = hclust(d=d.outcomes, method="averages")
plot(fit.complete, hang=-1)
d.outcomes = dist(t(outcomes[,-1]), method="euclidean")
fit.complete = hclust(d=d.outcomes, method="average")
plot(fit.complete, hang=-1)
d.symptoms = dist(t(symptoms_short[,-1]), method = "euclidean")
fit.complete.sym = hclust(d=d.symptoms, method = "complete")
plot(fit.complete.sym, hang = -1)
#Encode missing age as median
df = mutate(df, age = ifelse(is.na(age), median(age, na.rm = TRUE), age))
#Predict likelihood of death
imp.var.df = df[,c(4,7,8,10,14:85)]
indices = sample(seq_len(nrow(imp.var.df)), size = floor(0.75 * nrow(imp.var.df)))
traindf = imp.var.df[indices,]
testdf = imp.var.df[-indices,]
death_glm = glm(DEATH ~ .,  data=traindf, family="binomial")
summary(death_glm)
save.image("~/Desktop/MATH 441/Project/workspace.RData")
d.outcomes = dist(t(outcomes[,-1]), method="euclidean")
fit.complete = hclust(d=d.outcomes, method="complete")
plot(fit.complete, hang=-1)
knitr::opts_chunk$set(echo = TRUE)
death_glm = glm(DEATH ~ .,  data=traindf, family="binomial")
summary(death_glm)
ovarian_glm = glm(OVARIAN.CANCER ~ ., data = traindf, family = "binomial")
colnames(df) = make.names(colnames(df))
imp.var.df = df[,c(4,7,8,10,14:85)]
indices = sample(seq_len(nrow(imp.var.df)), size = floor(0.75 * nrow(imp.var.df)))
traindf = imp.var.df[indices,]
testdf = imp.var.df[-indices,]
death_glm = glm(DEATH ~ .,  data=traindf, family="binomial")
summary(death_glm)
ovarian_glm = glm(OVARIAN.CANCER ~ ., data = traindf, family = "binomial")
summary(ovarian_glm)
death_glm_young = glm(DEATH ~ .,  data=subset(traindf, age <=10), family="binomial")
summary(death_glm_young)
save.image("~/Desktop/MATH 441/Project/workspace.RData")
load("~/Desktop/MATH 441/Project/adverse food glm markdown.Rmd")
save.image("~/Desktop/MATH 441/Project/workspace.RData")
load("~/Desktop/MATH 441/Project/workspace.RData")
setwd("~/quant-methods")
#main_script.R
library(plyr)
codebook = read.csv2("./Project/data/codebook.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
religion_data = read.csv2("./Project/data/religion_data.csv", header = TRUE, sep = ",", na.strings = "", dec = ".")
religion_data[is.na(religion_data)] = 0
#Select subsets of data - CNG, ADH, RATE
CNG.var = subset(codebook, grepl("CNG$", variable_names))$variable_names
CNG.names = subset(codebook, grepl("CNG$", variable_names))$religion_name
ADH.var = subset(codebook, grepl("ADH$", variable_names))$variable_names
ADH.names = subset(codebook, grepl("ADH$", variable_names))$religion_name
RATE.var = subset(codebook, grepl("RATE$", variable_names))$variable_names
RATE.names = subset(codebook, grepl("RATE$", variable_names))$religion_name
CNG.data = religion_data[,CNG.var]
ADH.data = religion_data[,ADH.var]
RATE.data = religion_data[,RATE.var]
#Define Cosine Similarity
cosine.similarity = function(X, Y)
{
return(t(as.matrix(X)) %*% as.matrix(Y)/
(norm(as.matrix(X), type = "2")*norm(as.matrix(Y), type = "2")))
}
#CNG sims
CNG.sims = data.frame(matrix(data = NA, nrow = length(CNG.var), ncol = length(CNG.var)))
rownames(CNG.sims) = make.names(CNG.names)
colnames(CNG.sims) = make.names(CNG.names)
for(i in 1:nrow(CNG.sims))
{
for(j in 1:ncol(CNG.sims))
{
CNG.sims[i,j] = cosine.similarity(CNG.data[,i], CNG.data[,j])
}
}
#ADH sims
ADH.sims = data.frame(matrix(data = NA, nrow = length(ADH.var), ncol = length(ADH.var)))
rownames(ADH.sims) = make.names(ADH.names)
colnames(ADH.sims) = make.names(ADH.names)
for(i in 1:nrow(ADH.sims))
{
for(j in 1:ncol(ADH.sims))
{
ADH.sims[i,j] = cosine.similarity(ADH.data[,i], ADH.data[,j])
}
}
#RATE sims
RATE.sims = data.frame(matrix(data = NA, nrow = length(RATE.var), ncol = length(RATE.var)))
rownames(RATE.sims) = make.names(RATE.names)
colnames(RATE.sims) = make.names(RATE.names)
for(i in 1:nrow(RATE.sims))
{
for(j in 1:ncol(RATE.sims))
{
RATE.sims[i,j] = cosine.similarity(RATE.data[,i], RATE.data[,j])
}
}
#Find most similar religions to a given religion
most_sim = function(sim_df, rel_name, n)
{
simdf[order(simdf[,rel_name]),]
return(rownames(sim_df)[1:n])
}
most_sim(CNG.sims, "Zoroastrian", 5)
#Find most similar religions to a given religion
most_sim = function(sim_df, rel_name, n)
{
simdf[order(sim_df[,rel_name]),]
return(rownames(sim_df)[1:n])
}
most_sim(CNG.sims, "Zoroastrian", 5)
#Find most similar religions to a given religion
most_sim = function(sim_df, rel_name, n)
{
sim_df  = sim_df[order(sim_df[,rel_name]),]
return(rownames(sim_df)[1:n])
}
most_sim(CNG.sims, "Zoroastrian", 5)
#main_script.R
library(plyr)
codebook = read.csv2("./Project/data/codebook.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
religion_data = read.csv2("./Project/data/religion_data.csv", header = TRUE, sep = ",", na.strings = "", dec = ".")
religion_data[is.na(religion_data)] = 0
#Select subsets of data - CNG, ADH, RATE
CNG.var = subset(codebook, grepl("CNG$", variable_names))$variable_names
CNG.names = subset(codebook, grepl("CNG$", variable_names))$religion_name
ADH.var = subset(codebook, grepl("ADH$", variable_names))$variable_names
ADH.names = subset(codebook, grepl("ADH$", variable_names))$religion_name
RATE.var = subset(codebook, grepl("RATE$", variable_names))$variable_names
RATE.names = subset(codebook, grepl("RATE$", variable_names))$religion_name
CNG.data = religion_data[,CNG.var]
